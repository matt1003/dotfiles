##############################################################################
# general configuration
##############################################################################

# use zsh shell
set-option -g default-command "/usr/local/bin/zsh"

# disable the escape delay
set-option -s escape-time 0

# start window numbering from 1
set-option -g base-index 1

# renumber windows after closing
set-option -g renumber-windows on

# increase scroll-back history
set-option -g history-limit 500000

# enable mouse support
set-option -g mouse on

# allow tmux to pass focus-events to vim
set-option -g focus-events on

# define word separators
set-window-option -g word-separators " "

##############################################################################
# terminal configuration
##############################################################################

# true color support
set-option -g default-terminal "st-256color"
set-option -ga terminal-overrides ",st-256color:Tc"

##############################################################################
# key-bindings
##############################################################################

# use ctrl+a as prefix
set-option -g prefix C-a
bind-key a send-prefix
bind-key C-a send-prefix

# vi key-bindings
set-window-option -g mode-keys vi

# key-bindings to allow esc to exit copy mode
bind-key -T copy-mode-vi Escape send-keys -X cancel

# key-bindings for splits
bind-key h split-window -hb -c '#{pane_current_path}'
bind-key j split-window -v  -c '#{pane_current_path}'
bind-key k split-window -vb -c '#{pane_current_path}'
bind-key l split-window -h  -c '#{pane_current_path}'
bind-key q kill-pane # close the current split

# key-bindings for windows
bind-key -n C-Space new-window -c '#{pane_current_path}'
bind-key -n M-l next-window
bind-key -n M-h previous-window

# key-bindings for reload configuration
bind-key r source-file ~/.tmux.conf \; display " Configuration Reloaded "

# ensure home/end work correctly
bind-key -n End send-key C-e
bind-key -n Home send-key C-a

# copy word to system clipboard (double click)
bind-key -n DoubleClick1Pane { select-pane -t=; if -F '#{||:#{pane_in_mode},#{mouse_any_flag}}' { send -M } { copy-mode -H; send -X select-word; run -d0.2; send -X copy-pipe-and-cancel "~/bin/tmux-copy" } }
bind-key -T copy-mode DoubleClick1Pane { select-pane; send -X select-word; run -d0.2; send -X copy-pipe "~/bin/tmux-copy" }
bind-key -T copy-mode-vi DoubleClick1Pane { select-pane; send -X select-word; run -d0.2; send -X copy-pipe "~/bin/tmux-copy" }

# copy line to system clipboard (triple click)
bind-key -n TripleClick1Pane { select-pane -t=; if -F '#{||:#{pane_in_mode},#{mouse_any_flag}}' { send -M } { copy-mode -H; send -X select-line; run -d0.2; send -X copy-pipe-and-cancel "~/bin/tmux-copy" } }
bind-key -T copy-mode TripleClick1Pane { select-pane; send -X select-line; run -d0.2; send -X copy-pipe "~/bin/tmux-copy" }
bind-key -T copy-mode-vi TripleClick1Pane { select-pane; send -X select-line; run -d0.2; send -X copy-pipe "~/bin/tmux-copy" }

# copy selection to system clipboard (drag)
bind-key -n MouseDrag1Pane { if -F '#{||:#{pane_in_mode},#{mouse_any_flag}}' { set -g @was_in_copy_mode 1; send -M } { set -g @was_in_copy_mode 0; copy-mode -M; send -X begin-selection } }
bind-key -T copy-mode MouseDrag1Pane { set -g @was_in_copy_mode 1; select-pane; send -X begin-selection }
bind-key -T copy-mode-vi MouseDrag1Pane { set -g @was_in_copy_mode 1; select-pane; send -X begin-selection }
bind-key -T copy-mode MouseDragEnd1Pane { run -d0.2; if -F '#{@was_in_copy_mode}' { send -X copy-pipe "~/bin/tmux-copy" } { send -X copy-pipe-and-cancel "~/bin/tmux-copy" } }
bind-key -T copy-mode-vi MouseDragEnd1Pane { run -d0.2; if -F '#{@was_in_copy_mode}' { send -X copy-pipe "~/bin/tmux-copy" } { send -X copy-pipe-and-cancel "~/bin/tmux-copy" } }

# copy selection to system clipboard (keybindings)
bind-key -T copy-mode-vi Space { send -X begin-selection }
bind-key -T copy-mode-vi Enter { run -d0.2; send -X copy-pipe "~/bin/tmux-copy" }

# vi style visual select and yank
bind-key -T copy-mode-vi v { send -X begin-selection }
bind-key -T copy-mode-vi y { run -d0.2; send -X copy-pipe "~/bin/tmux-copy" }

# paste from system clipboard
bind-key -n MouseDown2Pane { select-pane -t=; if -F '#{||:#{pane_in_mode},#{mouse_any_flag}}' { send -M } { run "~/bin/tmux-paste" } }

##############################################################################
# status
##############################################################################

run ~/bin/tmux-status

##############################################################################
# plugins
##############################################################################

# tmux plugin manager
set -g @plugin 'tmux-plugins/tpm'

# continuous saving of tmux environment
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-restore 'on'
set -g @continuum-save-interval '5'

# restore tmux environment after restart
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-strategy-vim 'session'

# vim integration
set -g @plugin 'christoomey/vim-tmux-navigator'

# install tmux plugin manager
if "[ ! -d ~/.tmux/plugins ]" "\
  run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm';\
  run '~/.tmux/plugins/tpm/tpm';\
  run '~/.tmux/plugins/tpm/bin/install_plugins'"

# run tmux plugin manager
run '~/.tmux/plugins/tpm/tpm'
