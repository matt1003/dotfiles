#!/bin/bash

################################################################################
# script setup
################################################################################

set -o pipefail
shopt -s nullglob

I3=1

tmux_bld_file="$HOME/.tmux/build"
i3_bld_file="$HOME/.i3-build-status"

bld_name="unknown"
bld_path="unknown"
bld_step="unknown"

opt_color_none=0
opt_en_upgrade=0

supported_targets=()
specified_target=''
specified_recipe=''
specified_options=()

################################################################################
# script functions
################################################################################

array_contains () {
  local e ; for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0 ; done ; return 1
}

echo_error() {
  echo -e "${color_fail}error:${color_none} $1"
}

print_status() {
  # arguments
  phase=$1; status=$2; bash_color=$3; status_color=$4
  # print banner
  len=$((${#phase}+${#status}+7))
  printf "\n$bash_color"
  printf "%0.s*" $(seq 1 $len)
  printf "\n** ${phase^^} ${status^^} **\n"
  printf "%0.s*" $(seq 1 $len)
  printf "\n$color_none"
  # update status bar
  update_status_bar "$phase $status" "$status_color"
}

status_success() {
  print_status $bld_step "Success" "$color_pass" "#b8bb26"
}

status_failure() {
  print_status $bld_step "Failure" "$color_fail" "#fb4934"
}

status_aborted() {
  print_status $bld_step "Aborted" "$color_warn" "#fabd2f"
}

hdl_sig_int() {
  status_aborted ; exit 2
}

hdl_sig_abrt() {
  status_aborted ; exit 2
}

update_tmux_status_bar() {
  [ -z "$2" ] && local c="#f9f5d7" || local c="$2"
  echo "#[fg=#a89984,bg=#3c3836] $bld_name:#[fg=$c,bg=#3c3836,bold] $1 " \
    > "$tmux_bld_file-${bld_path//\//%}"
}

update_i3_status_bar() {
  [ -z "$2" ] && local c="#f9f5d7" || local c="$2"
  echo "{\"color\":\"#282828\",\"markup\":\"pango\",\"full_text\":\"<span background='$c'>  $bld_name: $1 </span>\"}," \
    > "$i3_bld_file-${bld_path//\//%}"
}

update_status_bar() {
  if [ $TMUX ]; then
    update_tmux_status_bar "$1" "$2"
  fi
  if [ $I3 ]; then
    update_i3_status_bar "$1" "$2"
  fi
}

clear_tmux_status_bar() {
  for file in $tmux_bld_file-$1; do
    if grep -q 'Success\|Failure\|Aborted' $file; then
      rm $file
    fi
  done
}

clear_i3_status_bar() {
  for file in $i3_bld_file-$1; do
    if grep -q 'Success\|Failure\|Aborted' $file; then
      rm $file
    fi
  done
}

clear_status_bar() {
  clear_tmux_status_bar "$1"
  clear_i3_status_bar "$1"
}

################################################################################
# script main
################################################################################

#
# setup signal catching
#
trap hdl_sig_int SIGINT
trap hdl_sig_abrt SIGABRT

#
# process arguments
#
for arg in $@; do
  case $arg in
    '--no-output-color')
      opt_color_none=1 ;;
    '--upgrade')
      opt_en_upgrade=1 ;;
    *)
      if [ "$specified_target" = "" ]; then
        specified_target=$arg
      elif [ "$specified_recipe" = "" ]; then
        specified_recipe=$arg
      else
        specified_options+=$arg
      fi ;;
  esac
done

#
# define ansi color codes
#
if [ $opt_color_none -ne 0 ]; then
  strip_ansi=' | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"'
  shift
else
  color_fail="\e[31m"
  color_pass="\e[32m"
  color_warn="\e[33m"
  color_info="\e[36m"
  color_none="\e[0m"
fi

#
# check for clear status command
#
if [ "$specified_target" = "clear" ]; then
  clear_status_bar '*'
  exit 0
fi

#
# locate build directory
#
while [ ! -f "$PWD/aviat-setup-env" ]; do
  cd ..
  if [ $PWD == "/" ]; then
     echo_error "unable to locate aviat-setup-env"
     exit 1
  fi
done
bld_name=$(basename $PWD)
bld_path=$PWD/build_$specified_target

#
# determine the supported targets
#
while read -r line ; do
  supported_targets+=($line)
done < <(. ./aviat-setup-env -l)

if [ ${#supported_targets[@]} -eq 0 ]; then
  echo_error "unable to determine supported targets"
  exit 1
fi

#
# check for list targets command
#
if [ "$specified_target" = "list" ]; then
  for target in ${supported_targets[@]}; do
    echo $target
  done
  exit 0
fi

#
# check target is specified
#
if [ "$specified_target" = "" ]; then
  echo_error "build target must be specified"
  exit 1
fi

#
# check recipe is specified
#
if [ "$specified_recipe" = "" ]; then
  echo_error "build recipe must be specified"
  exit 1
fi

#
# check specified target exists
#
if ! array_contains $specified_target "${supported_targets[@]}";then
  echo_error "invalid target \"$specified_target\""
  exit 1
fi

################################################################################
# kick off the build
################################################################################

#
# update status bar
#
update_status_bar "Building $specified_target $specified_recipe"
bld_step="Build"

#
# construct the build command
#
build_cmd=". ./aviat-setup-env $specified_target && bitbake $specified_recipe"
for option in "${specified_options[@]}" ; do
  build_cmd+=" $option"
done

#
# execute build command
#
#
echo -e "building target: $color_info\"$specified_target\"$color_none"
echo -e "building recipe: $color_info\"$specified_recipe\"$color_none"
echo -e "build directory: $color_info\"$bld_path\"$color_none"
echo -e "build command: $color_info\"$build_cmd\"$color_none"
echo -e "build start time: $color_info`date`$color_none"
eval "$build_cmd 2>&1 $strip_ansi"

#
# check build result
#
if [ $? -eq 0 ]; then
  echo -e "\nBuild Success for target $specified_target $specified_recipe"
  status_success
else
  echo -e "\nBuild Failure for target $specified_target $specified_recipe"
  status_failure
  exit 1
fi

#
# build complete
#
if [ $opt_en_upgrade -eq 0 ]; then
  exit 0
fi

################################################################################
# kick off the upgrade
################################################################################

#
# update status bar
#
update_status_bar "Upgrading $specified_target"
bld_step="Upgrade"

#
# construct the upgrade command
#
upgrade_cmd="return 1"

#
# execute upgrade command
#
echo -e "upgrading target: $color_info\"$specified_target\"$color_none"
echo -e "upgrade directory: $color_info\"$PWD\"$color_none"
echo -e "upgrade command: $color_info\"$upgrade_cmd$color_none"
echo -e "upgrade start time: $color_info`date`$color_none"
eval "$upgrade_cmd 2>&1 $strip_ansi"

#
# check upgrade result
#
if [ $? -eq 0 ]; then
  echo -e "\nUpgrade Success for target $specified_target"
  status_success
else
  echo -e "\nUpgrade Failure for target $specified_target"
  status_failure
  exit 1
fi

#
# upgrade complete
#
exit 0

