#!/bin/bash

#
# buildwrap provides a simple wrapper around buildsys,
# intended to make build success and failures obvious.
#
# A buildsys configuration file is required to specify
# support build commands. This should be a csv file in
# the following format:
#
# target name, build directory, build command, target aliases
#

################################################################################
# script setup
################################################################################

set -o pipefail
shopt -s nullglob

buildsys_pid=".buildsys.pid"
buildsys_config="$HOME/.buildcmds"

tmux_bld_file="$HOME/.tmux/build"
tmux_bld_name="unknown"
tmux_bld_path="unknown"

opt_color_none=0
opt_clear_tmux=0
opt_kill_build=0

restore_pwd=$PWD
running_pid=0
target_required=1

################################################################################
# script functions
################################################################################

exit_pass() {
  echo -e "\n$color_pass*********************$color_none"
  echo -e "$color_pass**  BUILD SUCCESS  **$color_none"
  echo -e "$color_pass*********************$color_none\n"
  if [ $TMUX ]; then
    update_tmux_status "Build Success" "#b8bb26"
  fi
  cleanup
  exit 0
}

exit_fail() {
  echo -e "\n$color_fail*********************$color_none"
  echo -e "$color_fail**  BUILD FAILURE  **$color_none"
  echo -e "$color_fail*********************$color_none\n"
  if [ $TMUX ]; then
    update_tmux_status "Build Failure" "#fb4934"
  fi
  cleanup
  exit 1
}

exit_warn() {
  echo -e "\n$color_warn*********************$color_none"
  echo -e "$color_warn**  BUILD ABORTED  **$color_none"
  echo -e "$color_warn*********************$color_none\n"
  if [ $TMUX ]; then
    update_tmux_status "Build Aborted" "#fabd2f"
  fi
  cleanup
  exit 2
}

array_contains () {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

hdl_sig_int() {
  kill_buildsys
  exit_warn
}

hdl_sig_abrt() {
  sleep 0.50
  exit_warn
}

kill_buildsys() {
  if [ -f $buildsys_pid ]; then
    pkill -SIGKILL -P `cat $buildsys_pid`
    sleep 0.25
    pkill -SIGKILL -P `cat $buildsys_pid`
    sleep 0.25
  fi
}

cleanup() {
  [ $running_pid -ne 0 ] && rm -f $buildsys_pid
  cd $restore_pwd
}

update_tmux_status() {
  [ -z "$2" ] && local c="#f9f5d7" || local c="$2"
  echo "#[fg=#a89984,bg=#3c3836]î‚³ $tmux_bld_name:#[fg=$c,bg=#3c3836,bold] $1 " \
    > "$tmux_bld_file-$tmux_bld_path"
}

clear_tmux_status() {
  for file in $tmux_bld_file-*; do
    if grep -q 'Success\|Failure\|Aborted' $file; then
      rm $file
    fi
  done
}

################################################################################
# script main
################################################################################

declare -A buildsys_dir_list
declare -A buildsys_cmd_list
declare -A buildsys_aliases
specified_targets=()

#
# check the buildsys config exists
#
if [ ! -f $buildsys_config ]; then
  echo "error: can not locate buildsys config \"$buildsys_config\""
  exit_fail
fi

#
# process the buildsys config
#
while IFS=, read -r target dir cmd aliases; do
  if [ -n  "$target" ]; then
    buildsys_dir_list["$target"]="$dir"
    buildsys_cmd_list["$target"]="$cmd"
    buildsys_aliases["$target"]="$target $aliases"
  fi
done < $buildsys_config

#
# process buildwrap arguments
#
for arg in $@; do
  case $arg in
    '--no-output-color')
      opt_color_none=1 ;;
    'clear')
      opt_clear_tmux=1 ;;
    'kill')
      opt_kill_build=1 ;;
    *)
      # split out comma separated args
      IFS=',' read -r -a sarg <<< $arg
      specified_targets+=(${sarg[@]}) ;;
  esac
done

#
# define ansi color codes
#
if [ $opt_color_none -ne 0 ]; then
 # TODO: this needs to be fixed, as it is not working currently
  strip_ansi=' | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"'
  shift
else
  color_fail="\e[31m"
  color_pass="\e[32m"
  color_warn="\e[33m"
  color_info="\e[36m"
  color_none="\e[0m"
fi

#
# check for tmux clear command
#
if [ $opt_clear_tmux -ne 0 ]; then
  clear_tmux_status
  exit 0
fi

#
# check target is specified
#
if [ $target_required -eq 1 ]; then
  if [ ${#specified_targets[@]} -eq 0 ]; then
     echo "error: no buildsys target specified"
     exit_fail
  fi
  # TODO: update buildwrap to handle multiple targets
  if [ ${#specified_targets[@]} -gt 1 ]; then
     echo "error: buildwrap only support one build target"
     exit_fail
   fi
fi

#
# process specified targets
#
for target in ${!buildsys_cmd_list[@]}; do
  for alias in ${buildsys_aliases[$target]}; do
    if [ "${specified_targets[0]}" == "$alias" ]; then
      buildsys_dir=${buildsys_dir_list[$target]}
      buildsys_cmd=${buildsys_cmd_list[$target]}
      buildsys_target=$target
    fi
  done
done
if [ -z $buildsys_target ]; then
  echo "error: unknown buildsys target \"${specified_targets[0]}\""
  exit_fail
fi

#
# locate buildsys directory
#
while [ ! -d "$PWD/$buildsys_dir" ]; do
  cd ..
  if [ $PWD == "/" ]; then
     echo "error: unable to locate buildsys directory"
     exit_fail
  fi
done
tmux_bld_name=$(basename $PWD)
tmux_bld_path=${PWD//\//%}
cd "./$buildsys_dir/"

#
# check for kill command
#
if [ $opt_kill_build -ne 0 ]; then
  kill_buildsys
  exit 0
fi

#
# ensure buildsys is not already running
#
if [ -f $buildsys_pid ]; then
  if ps -p `cat $buildsys_pid` > /dev/null; then
    echo "error: an instance of buildsys is already running"
    exit_fail
  else
    rm -f $buildsys_pid
  fi
fi
running_pid=1

#
# update tmux status bar
#
if [ $TMUX ]; then
  update_tmux_status "Building $buildsys_target"
fi

#
# initialize buildsys setup
#
trap hdl_sig_int SIGINT
trap hdl_sig_abrt SIGABRT

#
# execute buildsys command
#
echo -e "buildsys directory: $color_info\"$PWD\"$color_none"
echo -e "executing command: $color_info\"$buildsys_cmd$color_none"
echo -e "build start time: $color_info`date`$color_none"
eval ./$buildsys_cmd 2>&1 $strip_ansi

#
# check buildsys result
#
if [ $? -eq 0 ]; then
  echo -e "\nBuild Success for targets $buildsys_target"
  exit_pass
else
  echo -e "\nBuild Failure for targets $buildsys_target"
  exit_fail
fi
