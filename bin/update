#!/usr/bin/env python

from __future__ import print_function

import fcntl
import os
import re
import sys
import time

if os.geteuid() == 0:
    for lock in ['/var/lib/dpkg/lock', '/var/lib/apt/lists/lock']:
        with open(lock, 'w') as handle:
            try:
                fcntl.lockf(handle, fcntl.LOCK_EX | fcntl.LOCK_NB)
            except IOError:
                sys.exit(1)
    sys.exit(0)

def is_dpkg_active():
    return os.WEXITSTATUS(os.system("sudo %s" % os.path.realpath(__file__)))

def exit(status):
    if prompt_on_exit:
        print("Press enter to continue", end='')
        raw_input()
    sys.exit(status)

def exe(cmd):
    if os.WEXITSTATUS(os.system(cmd)) != 0:
        print("\"%s\" completed with a non-zero exit status" % cmd)
        print("\033[91m *** FAILURE ** \033[0m")
        exit(1)

def parse_apt_output(output):
    # install packages
    regex = re.compile('The following NEW packages will be installed:(.*?)(?=\n\w)', re.DOTALL)
    for packages in re.findall(regex, output):
        pkg_list['install'] += packages.split()
    # upgrade packages
    regex = re.compile('The following packages will be upgraded:(.*?)(?=\n\w)', re.DOTALL)
    for packages in re.findall(regex, output):
        pkg_list['upgrade'] += packages.split()
    # remove packages
    regex = re.compile('The following packages will be REMOVED:(.*?)(?=\n\w)', re.DOTALL)
    for packages in re.findall(regex, output):
        pkg_list['remove'] += packages.split()

def print_apt_packages():
    # install packages
    if pkg_list['install']:
        print("The following packages will be installed:")
        print("\033[92m  %s\033[0m" % ' '.join(pkg_list['install']))
    # upgrade packages
    if pkg_list['upgrade']:
        print("The following packages will be upgraded:")
        print("\033[93m  %s\033[0m" % ' '.join(pkg_list['upgrade']))
    # remove packages
    if pkg_list['remove']:
        print("The following packages will be removed:")
        print("\033[91m  %s\033[0m" % ' '.join(pkg_list['remove']))

pkg_list = {'install':[],'upgrade':[],'remove':[]}
prompt_on_exit = False

for arg in sys.argv[1:]:
    if arg == "--prompt-on-exit":
        prompt_on_exit = True

while is_dpkg_active():
    print("waiting for apt lock")
    time.sleep(1)

exe("sudo apt-get update")

parse_apt_output(os.popen("apt-get --dry-run dist-upgrade").read())
parse_apt_output(os.popen("apt-get --dry-run auto-remove").read())

if pkg_list['install'] or pkg_list['upgrade'] or pkg_list['remove']:

    print_apt_packages()

    print("Do you want to continue? ", end='')
    try:
        anwser = raw_input().lower()
    except:
        print("\n * OPERATION CANCELLED *")
        exit(1)

    if anwser != 'yes' and anwser != 'yeah':
        print(" * OPERATION CANCELLED *")
        exit(1)

    if pkg_list['install'] or pkg_list['upgrade']:
        exe("sudo apt-get dist-upgrade --assume-yes")

    if pkg_list['remove']:
        exe("sudo apt-get auto-remove --assume-yes")

else:
     print("No packages need to be installed/upgraded/removed.")

os.system("date +%Y%m%d > $HOME/.last-update")
print("\033[92m *** COMPLETE *** \033[0m")
exit(0)

