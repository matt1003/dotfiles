#!/usr/bin/env python

# pylint: disable=missing-docstring
# pylint: disable=wrong-import-order

from __future__ import print_function

import fcntl
import os
import re
import sys
import textwrap
import time

# when root user, check the apt/dpkg locks, and exit with the result
if os.geteuid() == 0:
    for lock in ['/var/lib/apt/lists/lock', '/var/lib/dpkg/lock']:
        with open(lock, 'w') as handle:
            try:
                fcntl.lockf(handle, fcntl.LOCK_EX | fcntl.LOCK_NB)
            except IOError:
                sys.exit(1)
    sys.exit(0)

def apt_or_dpkg_active():
    return os.WEXITSTATUS(os.system("sudo %s" % os.path.realpath(__file__)))

def exit_with_prompt(status):
    print("Press enter to continue", end='')
    raw_input()
    sys.exit(status)

def exe(cmd):
    # wait for the apt/dpkg lock
    while apt_or_dpkg_active():
        print("waiting for apt/dpkg lock")
        time.sleep(1)
    # execute the apt command
    exit_status = os.WEXITSTATUS(os.system(cmd))
    if exit_status == 0:
        return 0
    elif exit_status == 100:
        return exe(cmd)
    print("\"%s\" completed with a non-zero exit status" % cmd)
    print("\033[91m *** FAILURE ** \033[0m")
    exit_with_prompt(exit_status)

def parse_apt_packages(pkg_list, action, packages):
    for package in packages.split():
        if package not in pkg_list[action]:
            pkg_list[action].append(package)

def parse_apt_output(pkg_list, output):
    # install packages
    regex = re.compile(r'The following NEW packages will be installed:(.*?)(?=\n\w)', re.DOTALL)
    for packages in re.findall(regex, output):
        parse_apt_packages(pkg_list, 'install', packages)
    # upgrade packages
    regex = re.compile(r'The following packages will be upgraded:(.*?)(?=\n\w)', re.DOTALL)
    for packages in re.findall(regex, output):
        parse_apt_packages(pkg_list, 'upgrade', packages)
    # remove packages
    regex = re.compile(r'The following packages will be REMOVED:(.*?)(?=\n\w)', re.DOTALL)
    for packages in re.findall(regex, output):
        parse_apt_packages(pkg_list, 'remove', packages)
    regex = re.compile(r'The following packages .* are no longer required:(.*?)(?=\n\w)', re.DOTALL)
    for packages in re.findall(regex, output):
        parse_apt_packages(pkg_list, 'remove', packages)

def format_packages(packages):
    textwrapper = textwrap.TextWrapper(150, subsequent_indent='  ', break_on_hyphens=False)
    return '\n'.join(textwrapper.wrap(' '.join(packages)))

def print_apt_packages(pkg_list):
    # install packages
    if pkg_list['install']:
        print("The following %d packages will be installed:" % len(pkg_list['install']))
        print("\033[92m  %s\033[0m" % format_packages(pkg_list['install']))
    # upgrade packages
    if pkg_list['upgrade']:
        print("The following %d packages will be upgraded:" % len(pkg_list['upgrade']))
        print("\033[93m  %s\033[0m" % format_packages(pkg_list['upgrade']))
    # remove packages
    if pkg_list['remove']:
        print("The following %d packages will be removed:" % len(pkg_list['remove']))
        print("\033[91m  %s\033[0m" % format_packages(pkg_list['remove']))

def main(argv):
    pkg_list = {'install':[], 'upgrade':[], 'remove':[]}
    use_input_file = ''

    for arg in argv:
        use_input_file = arg

    if use_input_file:
        with open(use_input_file, 'r') as input_file:
            parse_apt_output(pkg_list, input_file.read())
    else:
        print("\033[94mrunning apt-get update...\033[0m")
        exe("sudo apt-get update")
        parse_apt_output(pkg_list, os.popen("apt-get --dry-run dist-upgrade").read())
        parse_apt_output(pkg_list, os.popen("apt-get --dry-run auto-remove").read())

    if pkg_list['install'] or pkg_list['upgrade'] or pkg_list['remove']:

        print_apt_packages(pkg_list)

        print("Do you want to continue? ", end='')
        try:
            anwser = raw_input().lower()
        except KeyboardInterrupt:
            print("\n * OPERATION CANCELLED *")
            exit_with_prompt(1)

        if anwser != 'yes' and anwser != 'yeah':
            print(" * OPERATION CANCELLED *")
            exit_with_prompt(1)

        if pkg_list['install'] or pkg_list['upgrade']:
            print("\033[94mrunning apt-get dist-upgrade...\033[0m")
            exe("sudo apt-get dist-upgrade --assume-yes")

        if pkg_list['remove']:
            print("\033[94mrunning apt-get auto-remove...\033[0m")
            exe("sudo apt-get auto-remove --assume-yes")

    else:
        print("\033[94mNo packages need to be installed/upgraded/removed.\033[0m")

    os.system("date +%Y%m%d > $HOME/.last-update")
    print("\033[92m *** COMPLETE *** \033[0m")
    exit_with_prompt(0)

if __name__ == "__main__":
    main(sys.argv[1:])
