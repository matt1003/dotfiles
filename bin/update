#!/bin/bash
set -euo pipefail

##############################################################################
# CONFIGURATION                                                              #
##############################################################################

DOTFILE_ROOT="$(git -C "$(dirname "$0")" rev-parse --show-toplevel)"
VERSION_LOCK="$DOTFILE_ROOT/install-lock.json"
DOWNLOAD_DIR="$HOME/.install"

FONTS_DIR="$HOME/.fonts"
ICONS_DIR="$HOME/.icons"

FONTS_SET="DejaVuSansMNerdFont"
ICONS_SET="Gruvbox-Plus-Light"

LOCAL_APPLICATIONS="$HOME/.local/share/applications"

# apt
declare APT_APPS=(
  ### CLI ###
  docker
  git
  imagemagick
  minicom
  ncdu
  silversearcher-ag
  tree
  ### GUI ###
  forticlient
  gedit
  gedit-plugins
  git-gui
  gitk
  google-chrome-stable
  meld
  microsoft-edge-stable
  speedcrunch
  terminator
  # virtualbox this will install an old version that does not work
  ### LazyVim ###
  curl
  fd-find
  fzf
  git
  gzip
  luarocks
  nodejs
  npm
  tar
  python3
  python3-pip
  python3-venv
  ripgrep
  unzip
  wget
  xclip
  xsel
  zip
)

# snap
declare SNAP_APPS=(
  firefox
  gimp
  pinta
  robo3t-snap
)

# pip
declare PIP_PKGS=(
  neovim
)

# npm
declare NPM_PKGS=(
  neovim
)

# dot
declare -A DOT_FILES=(
  ["gruvbox-dark.xml"]=.local/share/gedit/styles/gruvbox-dark.xml
  ["gruvbox-light.xml"]=.local/share/gedit/styles/gruvbox-light.xml
  [minirc]=.minirc.dfl
  [nvim]=.config/nvim
  [p10k.zsh]=.p10k.zsh
  [terminator.conf]=.config/terminator/config
  [tmux.conf]=.tmux.conf
  [zshenv]=.zshenv
  [zshrc]=.zshrc
)

# git
GIT_NAME=matt1003
GIT_EMAIL=matt1003@gmail.com
GIT_EDITOR=nvim
GIT_DIFFTOOL=meld

# gnome
declare -A GNOME_EXTENSIONS=(
  ["https://github.com/home-sweet-gnome/dash-to-panel.git"]="dash-to-panel@jderose9.github.com:make zip-file:true"
  ["https://github.com/KEIII/gnome-shell-panel-date-format.git"]="panel-date-format@keiii.github.com:make:dconf write /org/gnome/shell/extensions/panel-date-format/format \"$(<"$DOTFILE_ROOT/panel-date-format")\""
)

# fonts
NERD_FONTS_REPO="https://github.com/ryanoasis/nerd-fonts.git"
NERD_FONTS_ARCHIVE="DejaVuSansMono.zip"

# icons
GRUVBOX_ICONS_REPO="https://github.com/SylEleuth/gruvbox-plus-icon-pack.git"

# snap apt
APT_DESKTOP_DIR="/usr/share/applications"
declare -A APT_DESKTOP_ICONS=(
  ["virtualboxvm.desktop"]="apps/scalable/microsoft.svg"
)

# snap icons
SNAP_DESKTOP_DIR="/var/lib/snapd/desktop/applications"
declare -A SNAP_DESKTOP_ICONS=(
  ["firefox_firefox.desktop"]="apps/scalable/firefox.svg"
  ["gimp_gimp.desktop"]="apps/scalable/gimp.svg"
  ["pinta_pinta.desktop"]="apps/scalable/pinta.svg"
  ["robo3t-snap_robo3t.desktop"]="apps/scalable/robo3t.svg"
)

# edge apps
declare -A EDGE_DESKTOP_ICONS=(
  ["Microsoft Teams"]="apps/scalable/teams.svg"
  ["Outlook (PWA)"]="apps/scalable/ms-outlook.svg"
)

# lazygit
LAZYGIT_REPO="https://github.com/jesseduffield/lazygit.git"
LAZYGIT_ARCHIVE="lazygit_@VERSION@_Linux_x86_64.tar.gz"

# st-sx
STSX_REPO="https://github.com/veltza/st-sx.git"
STSX_DEPENDENCIES="build-essential libx11-xcb-dev libxft-dev libimlib2-dev libgd-dev libharfbuzz-dev libpcre2-dev"
STSX_PATCH_DIRECTORY="$DOTFILE_ROOT/st-sx"

# tmux
TMUX_REPO="https://github.com/tmux/tmux.git"
TMUX_DEPENDENCIES="build-essential libevent-dev libsixel-dev ncurses-dev pkg-config bison yacc"

# zsh
ZSH_REPO="https://github.com/zsh-users/zsh.git"
ZSH_DEPENDENCIES="build-essential libncursesw5-dev libreadline-dev libssl-dev libpcre2-dev zlib1g-dev texinfo gawk"

# nvim
NVIM_REPO="https://github.com/neovim/neovim.git"
NVIM_DEPENDENCIES="build-essential ninja-build gettext cmake curl unzip pkg-config libtool libtool-bin autoconf automake"

# TODO install virtualbox extension pack (needed for usb support)
# https://download.virtualbox.org/virtualbox/6.1.50/Oracle_VM_VirtualBox_Extension_Pack-6.1.50.vbox-extpack

##############################################################################
# IMPLEMENTATION                                                             #
##############################################################################

function msg() {
  echo -e "\033[1;34m$1\033[0m"
}

function suc() {
  echo -e "\033[1;32m$1\033[0m"
}

function wrn() {
  echo -e "\033[1;33mWarning:\033[0m $1"
}

function err() {
  echo -e "\033[1;31mError:\033[0m $1" >&2 && exit 1
}

function restart_gnome_shell() {
  killall -1 "gnome-shell" && sleep 3
}

function set_locked_version() {
  [ -f "$VERSION_LOCK" ] && jq ".[\"$1\"] = \"$2\"" "$VERSION_LOCK" >"$VERSION_LOCK.tmp" && mv "$VERSION_LOCK.tmp" "$VERSION_LOCK" ||
    echo -e "{\n  \"$1\": \"$2\"\n}" >"$VERSION_LOCK"
}

function get_locked_version() {
  [ -f "$VERSION_LOCK" ] && jq -r ".[\"$1\"]" "$VERSION_LOCK" ||
    echo "null"
}

function is_git_url() {
  [[ "$1" =~ ^(https?|git|ssh)://.+(\.git)?$ ]]
}

function is_github_url() {
  [[ "$1" =~ ^(https?|ssh|git)://(www\.)?github\.com/[^/]+/[^/]+(\.git)?$ ]]
}

function get_latest_github_version() {
  curl --fail -s "https://api.github.com/repos/$1/releases/latest" | jq -r '.tag_name' ||
    echo "null"
}

function get_latest_github_tag() {
  curl --fail -s "https://api.github.com/repos/$1/tags" | jq -r '.[0].name' ||
    echo "null"
}

function set_git_details() {
  # ensure we are working with a git repository:
  if ! is_git_url "$1"; then
    err "Not a valid git repository: $1"
  fi
  # extract the necessary details:
  _git_url="$1"
  _git_name="$(basename "${_git_url%.git}")"
  _git_directory="$DOWNLOAD_DIR/$_git_name"
  _git_version="$(get_locked_version "$_git_url")"
  # automatically grab the latest published version:
  if [[ "$_git_version" == "null" || "$use_latest_github_version" == "true" ]]; then
    if ! is_github_url "$_git_url"; then
      err "Auto version is currently support for GitHub repositories only."
    else
      # TODO: include: get_latest_github_tag
      _git_version="$(get_latest_github_version "${_git_url}")"
    fi
  fi
  # save the latest published version:
  if [[ "$_git_version" == "null" ]]; then
    err "Version not set for git repository: ${_git_url}"
  else
    set_locked_version "$_git_url" "$_git_version"
  fi
  # determine the details of the archive file to be downloaded:
  if [[ -n "${2-}" ]]; then
    if ! is_github_url "$_git_url"; then
      err "Download archive is currently support for GitHub repositories only."
    else
      _git_archive_file="${2:+${2//@VERSION@/${_git_version#v}}}"
      _git_archive_url="${_git_url%.git}/releases/download/${_git_version}/${_git_archive_file}"
    fi
  fi
}

function clone_and_update_git_repository() {
  set_git_details "$1"
  if [[ ! -d "$_git_directory/.git" ]]; then
    msg "$_git_name: git clone"
    git clone "$_git_url" "$_git_directory"
  fi
  msg "$_git_name: git fetch"
  git -C "$_git_directory" fetch --tags --prune --force
  msg "$_git_name: git checkout"
  if git -C "$_git_directory" rev-parse --verify --quiet "origin/$_git_version" >/dev/null; then
    # If it's a branch, check it out with tracking
    git -C "$_git_directory" checkout -B "$_git_version" "origin/$_git_version"
  else
    # Otherwise, checkout tag/commit (detached HEAD)
    git -C "$_git_directory" checkout "$_git_version"
  fi
}

function download_github_archive() {
  set_git_details "$1" "$2"
  msg "$_git_name: remove old download"
  rm -rfv "$_git_directory"
  mkdir -p "$_git_directory"
  msg "$_git_name: download"
  echo "downloading: $_git_archive_url"
  curl --fail -L -o "$_git_directory/$_git_archive_file" "$_git_archive_url"
}

function create_symbolic_link() {
  local link="$1" target="$2"
  mkdir -p "$(dirname $link)"
  if [[ -e "$link" ]]; then
    if [[ -L "$link" ]]; then
      unlink "$link"
    else
      echo "backup: $link"
      mv "$link" "$link.orig"
    fi
  fi
  ln -sfv "$target" "$link"
}

function install_dependencies() {
  for command in "${!dependencies[@]}"; do
    package="${dependencies[$command]}"
    if ! command -v "$command" &>/dev/null; then
      wrn "$command not found, installing $package..."
      sudo apt install -y "$package"
    fi
  done
}

function find_desktop_file() {
  grep -l "Name=$1" "$2"*.desktop || echo "[[ $1 ]]"
}

function copy_desktop_file() {
  local src="$1" dst="$2" icon="$3"
  if [ ! -f "$src" ]; then
    wrn "Desktop file does not exist: $src"
    return
  fi
  if [ ! -e "$icon" ]; then
    wrn "Icon file does not exist: $icon"
    return
  fi
  if [ "$src" != "$dst" ]; then
    cp -v "$src" "$dst"
  else
    echo "'$src' -> '$dst'"
  fi
  sed -i "s|Icon=.*|Icon=$icon|" "$dst"
}

function apply_patch() {
  sudo patch --forward --batch --reject-file=/dev/null "$1" <"$2" || echo "Did not apply patch: $2"
}

function apply_git_patch() {
  git am <$1
}

function apply_git_patches() {
  local patch_dir=$1
  local target=${2:-master}
  local branch=${3:-patched}
  # create a branch to apply the patches on
  git branch -f "$branch" "$target"
  git checkout "$branch"
  # apply each patch
  for patch in "$patch_dir/"*.patch; do
    apply_git_patch "$patch"
  done
}

NO_PATCHES=""
NO_CONFIGURATION=""

function make_install() {
  local name=$1
  local directory=$2
  local dependencies=${3:-}
  local patch_dir=${4:-}
  local clean_cmd=${5:-"make clean"}
  local configure_cmd=${6:-}
  local make_cmd=${7:-"make"}
  local install_cmd=${8:-"sudo make install"}
  (
    cd "$directory"
    # build prerequisites
    if [[ -n "$dependencies" ]]; then
      msg "$name: install dependencies"
      sudo apt install -y $dependencies
    fi
    # patch
    if [[ -n "$patch_dir" ]]; then
      msg "$name: patch"
      apply_git_patches "$patch_dir" "$_git_version"
    fi
    # clean
    if [[ -n "$clean_cmd" && "$use_clean_build" == "true" ]]; then
      msg "$name: clean"
      eval "$clean_cmd"
    fi
    # configure
    if [[ -n "$configure_cmd" ]]; then
      msg "$name: configure"
      eval "$configure_cmd"
    fi
    # make
    msg "$name: make"
    eval "$make_cmd"
    # install
    msg "$name: install"
    eval "$install_cmd"
  )
}

function rm_arg() {
  target="$1"
  shift
  args=()
  for arg in "$@"; do
    if [[ "$arg" != "$target" ]]; then
      args+=("$arg")
    fi
  done
  echo "${args[@]}"
}

##############################################################################
# INSTALLERS                                                                 #
##############################################################################

function install_apt_apps() {
  msg "apt: update"
  sudo apt update -y
  msg "apt: install"
  sudo apt install -y "${APT_APPS[@]}"
  msg "apt: upgrade"
  sudo apt upgrade -y
  msg "apt: autoremove"
  sudo apt autoremove -y
}

function install_snap_apps() {
  msg "snap: install"
  for app in "${SNAP_APPS[@]}"; do
    sudo snap install "$app"
  done
  msg "snap: refresh"
  sudo snap refresh
}

function install_pip_pkgs() {
  msg "pip: install"
  for pkg in "${PIP_PKGS[@]}"; do
    pip3 install "$pkg"
  done
}

function install_npm_pkgs() {
  msg "npm: install"
  for pkg in "${NPM_PKGS[@]}"; do
    sudo npm install -g "$pkg"
  done
}

function install_dot_files() {
  msg "dot files: install"
  for file in "${!DOT_FILES[@]}"; do
    create_symbolic_link "$HOME/${DOT_FILES[$file]}" "$DOTFILE_ROOT/$file"
  done
}

function install_bin_files() {
  msg "bin files: install"
  create_symbolic_link "$HOME/bin" "$DOTFILE_ROOT/bin"
}

function install_git_config() {
  msg "git config: configure local settings"
  git -C "$DOTFILE_ROOT" config user.name "$GIT_NAME"
  echo "name: $GIT_NAME"
  git -C "$DOTFILE_ROOT" config user.email "$GIT_EMAIL"
  echo "email: $GIT_EMAIL"
  msg "git config: configure global settings"
  git config --global core.editor "$GIT_EDITOR"
  echo "editor: $GIT_EDITOR"
  git config --global diff.tool "$GIT_DIFFTOOL"
  echo "difftool: $GIT_DIFFTOOL"
  git config --global merge.tool "$GIT_DIFFTOOL"
  echo "mergetool: $GIT_DIFFTOOL"
}

function install_gnome_extensions() {
  # install each extension
  for ext in "${!GNOME_EXTENSIONS[@]}"; do
    IFS=":" read -r ext_name make_cmd config_cmd <<<"${GNOME_EXTENSIONS[$ext]}"
    clone_and_update_git_repository "$ext"
    (
      cd "$_git_directory"
      # make:
      msg "gnome extensions: $ext_name: make"
      eval "$make_cmd"
      # install:
      msg "gnome extensions: $ext_name: install"
      gnome-extensions install --force "${ext_name}.zip"
    )
  done
  # reset gnome
  msg "gnome extentions: restarting gnome shell"
  restart_gnome_shell
  # install each extension
  for ext in "${!GNOME_EXTENSIONS[@]}"; do
    IFS=":" read -r ext_name make_cmd config_cmd <<<"${GNOME_EXTENSIONS[$ext]}"
    # configure:
    msg "gnome extensions: $ext_name: configure"
    eval "$config_cmd"
    # enable:
    msg "gnome extensions: $ext_name: enable"
    gnome-extensions enable "${ext_name}"
  done
}

function install_fonts() {
  download_github_archive "$NERD_FONTS_REPO" "$NERD_FONTS_ARCHIVE"
  (
    cd "$_git_directory"
    # extract:
    msg "$_git_name: extract"
    unzip -o "$_git_archive_file" -d "${_git_archive_file%.zip}"
    # install:
    msg "$_git_name: install"
    mkdir -p "$FONTS_DIR"
    cp -v ${_git_archive_file%.zip}/*.ttf "$FONTS_DIR"
    fc-cache -f
  )
}

function install_icons() {
  clone_and_update_git_repository "$GRUVBOX_ICONS_REPO"
  (
    cd "$_git_directory"
    # install:
    msg "$_git_name: install"
    create_symbolic_link "$ICONS_DIR/Gruvbox-Plus-Dark" "$_git_directory/Gruvbox-Plus-Dark"
    create_symbolic_link "$ICONS_DIR/Gruvbox-Plus-Light" "$_git_directory/Gruvbox-Plus-Light"
    gsettings set org.gnome.desktop.interface icon-theme "$ICONS_SET"
    # icons
    msg "$_git_name: update apt icons"
    for file in "${!APT_DESKTOP_ICONS[@]}"; do
      local src="$APT_DESKTOP_DIR/$file"
      local dst="$LOCAL_APPLICATIONS/$file"
      local icon="$ICONS_DIR/$ICONS_SET/${APT_DESKTOP_ICONS[$file]}"
      copy_desktop_file "$src" "$dst" "$icon"
    done
    msg "$_git_name: update snap icons"
    for file in "${!SNAP_DESKTOP_ICONS[@]}"; do
      local src="$SNAP_DESKTOP_DIR/$file"
      local dst="$LOCAL_APPLICATIONS/$file"
      local icon="$ICONS_DIR/$ICONS_SET/${SNAP_DESKTOP_ICONS[$file]}"
      copy_desktop_file "$src" "$dst" "$icon"
    done
    msg "$_git_name: update edge icons"
    for name in "${!EDGE_DESKTOP_ICONS[@]}"; do
      local file="$(find_desktop_file "$name" "$LOCAL_APPLICATIONS/msedge-")"
      local icon="$ICONS_DIR/$ICONS_SET/${EDGE_DESKTOP_ICONS[$name]}"
      copy_desktop_file "$file" "$file" "$icon"
    done
    msg "$_git_name: restarting gnome shell"
    restart_gnome_shell
    # git icons
    msg "$_git_name: patching git icons"
    apply_patch /usr/bin/gitk "$DOTFILE_ROOT/gitk.patch"
    apply_patch /usr/lib/git-core/git-gui "$DOTFILE_ROOT/git-gui.patch"
    for icon in "$DOTFILE_ROOT"/icons/*.png; do
      create_symbolic_link "$ICONS_DIR/$(basename $icon)" "$icon"
    done
  )
}

function install_lazygit() {
  download_github_archive "$LAZYGIT_REPO" "$LAZYGIT_ARCHIVE"
  (
    cd "$_git_directory"
    # extract:
    msg "$_git_name: extract"
    tar xfv "$_git_archive_file" lazygit
    # install:
    msg "$_git_name: install"
    sudo install lazygit -v -D -t /usr/local/bin/
  )
}

function install_stsx() {
  clone_and_update_git_repository "$STSX_REPO"
  make_install \
    "$_git_name" \
    "$_git_directory" \
    "$STSX_DEPENDENCIES" \
    "$STSX_PATCH_DIRECTORY" \
    "make clean" \
    "rm -fv config.h"
}

function install_tmux() {
  clone_and_update_git_repository "$TMUX_REPO"
  make_install \
    "$_git_name" \
    "$_git_directory" \
    "$TMUX_DEPENDENCIES" \
    "$NO_PATCHES" \
    "[ ! -f config.status ] || make distclean" \
    "sh autogen.sh && ./configure --enable-sixel"
}

function install_zsh() {
  clone_and_update_git_repository "$ZSH_REPO"
  make_install \
    "$_git_name" \
    "$_git_directory" \
    "$ZSH_DEPENDENCIES" \
    "$NO_PATCHES" \
    "[ ! -f config.status ] || make distclean" \
    "./Util/preconfig && ./configure --prefix=/usr/local --enable-multibyte --enable-pcre --with-tcsetpgrp --enable-zsh-secure-free" \
    "make" \
    "sudo make install.bin install.modules install.fns"
}

function install_nvim() {
  clone_and_update_git_repository "$NVIM_REPO"
  make_install \
    "$_git_name" \
    "$_git_directory" \
    "$NVIM_DEPENDENCIES" \
    "$NO_PATCHES" \
    "make distclean" \
    "$NO_CONFIGURATION" \
    "make CMAKE_BUILD_TYPE=Release"
}

function install_git_config() {
  msg "git config: configure local settings"
  git -C "$DOTFILE_ROOT" config user.name "$GIT_NAME"
  echo "name: $GIT_NAME"
  git -C "$DOTFILE_ROOT" config user.email "$GIT_EMAIL"
  echo "email: $GIT_EMAIL"

  msg "git config: configure global settings"
  git config --global core.editor "$GIT_EDITOR"
  echo "editor: $GIT_EDITOR"
  git config --global diff.tool "$GIT_DIFFTOOL"
  echo "difftool: $GIT_DIFFTOOL"
  git config --global merge.tool "$GIT_DIFFTOOL"
  echo "mergetool: $GIT_DIFFTOOL"
}

function install_wallpaper_config() {
  msg "wallpaper: configure"
  $DOTFILE_ROOT/bin/wallpaper --schedule
}

function install_backups_config() {
  msg "backups: configure"
  for backup in $DOTFILE_ROOT/bin/*-backup; do
    $backup --schedule
  done
}

##############################################################################
# EXECUTION                                                                  #
##############################################################################

# Ensure all commands required to run this script are installed:
declare -A dependencies=(
  ["curl"]="curl"
  ["fc-cache"]="fontconfig"
  ["git"]="git"
  ["gnome-extensions"]="gnome-shell-extensions"
  ["gsettings"]="libglib2.0-bin"
  ["install"]="coreutils"
  ["jq"]="jq"
  ["make"]="make"
  ["patch"]="patch"
  ["sed"]="sed"
  ["tar"]="tar"
  ["unzip"]="unzip"
  ["zip"]="zip"
)
install_dependencies

# Extract the latest github version argument:
if [[ " $* " =~ " --latest " ]]; then
  use_latest_github_version=true
  set -- $(rm_arg "--latest" $@)
else
  use_latest_github_version=false
fi

# Extract the build clean argument:
if [[ " $* " =~ " --clean " ]]; then
  use_clean_build=true
  set -- $(rm_arg "--clean" $@)
else
  use_clean_build=false
fi

# Default to apt and snap when no arguments are present:
if [[ $# -eq 0 ]]; then
  set -- apt snap
fi

# Install everything when argument 'all' is present:
if [[ " $* " =~ " all " ]]; then
  set -- apt snap pip npm dot bin git gnome fonts icons lazygit stsx tmux zsh nvim wallpaper backups
fi

# Loop through each argument and execute the corresponding installer:
for arg in "$@"; do
  case "$arg" in
  apt)
    install_apt_apps
    ;;
  snap)
    install_snap_apps
    ;;
  pip)
    install_pip_pkgs
    ;;
  npm)
    install_npm_pkgs
    ;;
  dot)
    install_dot_files
    ;;
  bin)
    install_bin_files
    ;;
  git)
    install_git_config
    ;;
  gnome)
    install_gnome_extensions
    ;;
  fonts)
    install_fonts
    ;;
  icons)
    install_icons
    ;;
  lazygit)
    install_lazygit
    ;;
  stsx)
    install_stsx
    ;;
  tmux)
    install_tmux
    ;;
  zsh)
    install_zsh
    ;;
  nvim)
    install_nvim
    # TODO: Reset lazy vim (custom reset logic)
    if [[ "$use_clean_build" == "true" ]]; then
      msg "lazy vim: clean"
      rm -rf "$HOME/.cache/nvim" "$HOME/.local/share/nvim" "$HOME/.local/state/nvim" "$HOME/.config/nvim/lazy-lock.json"
    fi
    ;;
  wallpaper)
    install_wallpaper_config
    ;;
  backups)
    install_backups_config
    ;;
  *)
    err "Unknown argument: \"$arg\""
    ;;
  esac
done

suc " *** COMPLETE ***"
