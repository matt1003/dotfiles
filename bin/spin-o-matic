#!/bin/bash
set -euo pipefail

SPIN_DURATION_SEC=2
SPIN_METHOD="quadratic_ease_in"
IMAGE_MAX_WIDTH_PX=500
IMAGE_MAX_HEIGHT_PX=600
START_MESSAGES=(
  "Spin the wheel to play!"
  "Let the games begin!"
  "Who's it gonna be? Let's find out!"
  "Welcome players! Who will be picked first?"
  "Ready, set, fight!"
  "One of you will be chosen. The rest? Irrelevant!"
)
SELECTING_LAST_MESSAGES=(
  "And the last..."
)
END_MESSAGES=(
  "Bye-bye!"
)
DECORATION="¸,ø¤º°\`°º¤ø,¸"
RAINBOW_TEXT_COLORS=(91 93 92 96 94 95) # Red, Yellow, Green, Cyan, Blue, Magenta
DEBUG=false

function error() {
  echo "Error: $1" >&2
  exit 1
}

function debug() {
  if $DEBUG; then
    echo "$1"
  fi
}

function full_path() {
  realpath -e "${1/#\~/$HOME}"
}

function check_for_input() { # (non-blocking)
  # check for any key press:
  read -rsn1 -t 0.001 KEY
}

function wait_for_input() { # (blocking)
  # flush pending input:
  while read -rsn1 -t 0.001 KEY; do :; done
  # wait for the next key press:
  while ! read -rsn1 -t 0.001 KEY; do :; done
}

function sub_second_sleep() {
  perl -e "select(undef, undef, undef, $1)"
}

function esc_cursor_top_left() {
  echo -en "\033[H"
}

function esc_clear_screen() {
  echo -en "\033[2J"
}

function esc_clear_scrollback() {
  echo -en "\033[3J"
}

function esc_goto_position() {
  echo -en "\033[${1};${2}H"
}

function esc_format_reset() {
  echo -en "\033[0m"
}

function esc_format_bold() {
  echo -en "\033[1m"
}

function esc_format_faint() {
  echo -en "\033[2m"
}

function esc_format_color() {
  echo -en "\033[${1}m"
}

function clear_screen_sequence() {
  if $DEBUG; then
    echo -en "$(esc_clear_screen)$(esc_cursor_top_left)"
  else
    echo -en "$(esc_clear_screen)$(esc_cursor_top_left)$(esc_clear_scrollback)"
  fi
}

function goto_start_of_line() {
  echo -en "$(esc_goto_position $1 1)"
}

function bold_text() {
  echo -en "$(esc_format_bold)${1}$(esc_format_reset)"
}

function faint_text() {
  echo -en "$(esc_format_faint)${1}$(esc_format_reset)"
}

function rainbow_text() {
  local text="$1" output="" i=0
  while IFS= read -r -n1 c; do
    [[ -z "$c" ]] && continue # skip empty (like EOF)
    color="${RAINBOW_TEXT_COLORS[i % ${#RAINBOW_TEXT_COLORS[@]}]}"
    output+="$(esc_format_color $color)${c}$(esc_format_reset)"
    ((i++))
  done <<<"$text"
  echo -en "$output"
}

function sliding_text() {
  local text="$1"
  local window="$2"
  local length="${#text}"
  local start="$(($length - (${shift_x:-0} % $length)))"
  local count=$((window / length + 2))
  local repeated="$(printf "%0.s$text" $(seq 1 $count))"
  echo -en "${repeated:$start:$window}"
}

function load_name_image_map() {
  while IFS="=" read -r name image; do
    name_image_map["$name"]="$image"
  done < <(jq -r 'to_entries[] | "\(.key)=\(.value)"' "$1")
}

function calculate_dimensions() {
  # define pixels per col/row:
  local px_per_col=10
  local px_per_row=21
  debug "px_per_col=$px_per_col"
  debug "px_per_row=$px_per_row"

  # obtain terminal dimensions in cols/rows:
  local display_cols=$(tput cols)
  local display_rows=$(tput lines)
  debug "display_cols=$display_cols"
  debug "display_rows=$display_rows"

  # define padding around the image in cols/rows:
  local image_min_padding_cols=2
  local image_min_padding_rows=1
  debug "image_min_padding_cols=$image_min_padding_cols"
  debug "image_min_padding_rows=$image_min_padding_rows"

  # calculate the max terminal cols/rows available for the image:
  local image_available_cols=$((display_cols - (image_min_padding_cols * 2)))
  local image_available_rows=$((display_rows - (image_min_padding_rows * 2)))
  debug "image_available_cols=$image_available_cols"
  debug "image_available_rows=$image_available_rows"

  # calculate max image cols/rows from the max width/height in pixels:
  local image_max_cols=$(((IMAGE_MAX_WIDTH_PX / px_per_col) - (image_min_padding_cols * 2)))
  local image_max_rows=$(((IMAGE_MAX_HEIGHT_PX / px_per_row) - (image_min_padding_rows * 2)))
  debug "image_max_cols=$image_max_cols"
  debug "image_max_rows=$image_max_rows"

  # make the actual image col/rows as large as possible, limited by the max cols/rows:
  image_cols=$(((image_available_cols < image_max_cols) ? image_available_cols : image_max_cols))
  image_rows=$(((image_available_rows < image_max_rows) ? image_available_rows : image_max_rows))
  debug "image_cols=$image_cols"
  debug "image_rows=$image_rows"

  # convert the actual image cols/rows back to width/height in pixels:
  image_width_px=$((image_cols * px_per_col))
  image_height_px=$((image_rows * px_per_row))
  debug "image_width_px=$image_width_px"
  debug "image_height_px=$image_height_px"

  # calculate the starting line for the text and image:
  line1_position=2 # allow one line gap before displaying the first line
  line2_position=$((($(generate_contestants "len") + display_cols - 1) / display_cols + line1_position + 1))
  image_position=$((line2_position + 2))
  debug "line1_position=$line1_position"
  debug "line2_position=$line2_position"
  debug "image_position=$image_position"
}

function generate_padding() {
  local visible_cols="$1"
  local display_cols=$(tput cols)
  local padding_cols=$(((display_cols - visible_cols) / 2))
  ((padding_cols < 0)) && padding_cols=0
  printf "%$((padding_cols < 0 ? 0 : padding_cols))s" ""
}

function generate_contestants() {
  local output="Contestants: "
  local length="${#output}"
  for ((i = 0; i < ${#all_names[@]}; i++)); do
    local name="${all_names[i]}"
    length=$((length + ${#name}))
    local is_last_in_list=$((i == ${#all_names[@]} - 1))
    local is_remaining=$([[ " ${remaining_names[*]} " == *" $name "* ]] && echo 1 || echo 0)
    if ((!is_last_in_list)); then
      name+=", "
      length=$((length + 2))
    fi
    if ((!is_remaining)); then
      name="$(faint_text "$name")"
    fi
    output+="$name"
  done
  if [[ "${1:-}" == "len" ]]; then
    printf "%d" $length
  else
    local padding="$(generate_padding "$length")"
    printf "%s%s%s" "$padding" "$output" "$padding"
  fi
}

function generate_start_message() {
  local output="$selected_start_message"
  local length="${#output}"
  if [[ "${1:-}" == "len" ]]; then
    printf "%d" $length
  else
    local padding="$(generate_padding "$length")"
    printf "%s%s%s" "$padding" "$output" "$padding"
  fi
}

function generate_selecting_message() {
  local output
  if [[ -z "${selected_name:-}" ]]; then
    output=""
  elif ((${#remaining_names[@]} > 1)); then
    output="${selected_name}"
  else
    local padded_name="$(printf "%*s%s\n" "${#selected_name}" "" "$selected_name")"
    output="${selected_last_message} $(sliding_text "$padded_name" "${#selected_name}")"
  fi
  local length="${#output}"
  if [[ "${1:-}" == "len" ]]; then
    printf "%d" $length
  else
    local padding="$(generate_padding "$length")"
    printf "%s%s%s" "$padding" "$output" "$padding"
  fi
}

function generate_selected_name_with_decorations() {
  local name=" ${selected_name} "
  local name_length="${#name}"
  local decoration_left_length="$(((image_cols - name_length) / 2))"
  local decoration_right_lendth="$((image_cols - name_length - decoration_left_length))"
  local length="$((decoration_left_length + name_length + decoration_right_lendth))"
  if [[ "${1:-}" == "len" ]]; then
    printf "%d" $length
  else
    local padding="$(generate_padding "$length")"
    printf "%s%s%s%s%s" \
      "$padding" \
      "$(rainbow_text "$(sliding_text "$DECORATION" "$decoration_left_length")")" \
      "$(bold_text "$name")" \
      "$(rainbow_text "$(sliding_text "$DECORATION" "$decoration_right_lendth")")" \
      "$padding"
  fi
}

function generate_end_message() {
  local output="$selected_end_message"
  local length="${#output}"
  if [[ "${1:-}" == "len" ]]; then
    printf "%d" $length
  else
    local padding="$(generate_padding "$length")"
    printf "%s%s%s" "$padding" "$output" "$padding"
  fi
}

function selected_image_full_path() {
  full_path "${name_image_map["$selected_name"]}"
}

function convert_image_to_sixel() {
  convert "$1" -resize "$2" sixel:-
}

function cache_sixel_image() {
  convert_image_to_sixel "$1" "${image_width_px}x${image_height_px}" >"$image_temp_file"
}

function display_cached_sixel_image() {
  cat "$image_temp_file"
}

function update_display() {
  update_in_progress=true

  local clear="" line1="" line2="" image=""

  case "${current_screen:-start}" in
  "start")
    clear="$(clear_screen_sequence)"
    line1+="$(goto_start_of_line $line1_position)$(generate_contestants)"
    line2+="$(goto_start_of_line $line2_position)$(generate_start_message)"
    image=""
    ;;
  "selecting")
    clear="$(clear_screen_sequence)"
    line1+="$(goto_start_of_line $line1_position)$(generate_contestants)"
    line2+="$(goto_start_of_line $line2_position)$(generate_selecting_message)"
    image=""
    ;;
  "selected")
    clear=""
    line1+="$(goto_start_of_line $line1_position)$(generate_contestants)"
    line2+="$(goto_start_of_line $line2_position)$(generate_selected_name_with_decorations)"
    image="$(selected_image_full_path)"
    ;;
  "end")
    clear="$(clear_screen_sequence)"
    line1+="$(goto_start_of_line $line1_position)$(generate_contestants)"
    line2+="$(goto_start_of_line $line2_position)$(generate_end_message)"
    image=""
    ;;
  *)
    error "Unknown screen: \"${current_screen}\"." >&2
    ;;
  esac

  if [ -n "$image" ]; then
    cache_sixel_image "$image"
  fi

  stty -echo # do not echo input text
  tput civis # disable cursor display

  if [[ "${1:-}" == "force-clear-screen" ]]; then
    printf "$(clear_screen_sequence)"
  else
    printf "$clear"
  fi

  if [ -n "$image" ]; then
    printf "$(goto_start_of_line $image_position)$(generate_padding "$image_cols")"
    display_cached_sixel_image
  fi

  if [ -n "$line1" ]; then
    printf "$line1"
  fi

  if [ -n "$line2" ]; then
    printf "$line2"
  fi

  if [[ "$update_in_progress" == "resize-occurred-during-update" ]]; then
    calculate_dimensions
    update_display force-clear-screen
  else
    update_in_progress=false
  fi
}

function update_line2() {
  update_in_progress=true

  local line2=""

  case "${current_screen:-start}" in
  "start")
    # nothing to do
    ;;
  "selecting")
    line2+="$(goto_start_of_line $line2_position)$(generate_selecting_message)"
    ;;
  "selected")
    line2+="$(goto_start_of_line $line2_position)$(generate_selected_name_with_decorations)"
    ;;
  "end")
    # nothing to do
    ;;
  *)
    error "Unknown screen: \"${current_screen}\"." >&2
    ;;
  esac

  if [ -n "$line2" ]; then
    printf "$line2"
  fi

  if [[ "$update_in_progress" == "resize-occurred-during-update" ]]; then
    calculate_dimensions
    update_display force-clear-screen
  else
    update_in_progress=false
  fi
}

function select_random_name() {
  echo "${remaining_names[$((RANDOM % ${#remaining_names[@]}))]}"
}

function remove_name() {
  local tmp=()
  for name in "${remaining_names[@]}"; do
    [[ "$name" != "$1" ]] && tmp+=("$name")
  done
  remaining_names=("${tmp[@]}")
}

function quadratic_ease_out() {
  bc -l <<<"scale=6; $1 * (2 - $1)"
}

function cubic_ease_out() {
  bc -l <<<"scale=6; 1 - (1 - $1)^3"
}

function exponential_ease_out() {
  bc -l <<<"scale=6; t = $1; 1 - e(-10 * t * l(2))"
}

function quadratic_ease_in() {
  bc -l <<<"scale=6; $1 ^ 2"
}

function cubic_ease_in() {
  bc -l <<<"scale=6; $1 ^ 3"
}

function exponential_ease_in() {
  bc -l <<<"scale=6; e(-10 * (1 - $1) * l(2))"
}

function line2_selecting_name_animation() {
  # Loop continuously until SPIN_DURATION_SEC is exceeded:
  local start_time=$(date +%s.%N)
  while :; do
    # Select a name at random:
    selected_name="$(select_random_name)"

    # Update the display with the selected name:
    current_screen="selecting"
    update_line2

    # Check for any key press (non-blocking):
    if check_for_input; then
      if [[ "$KEY" == "q" ]]; then
        exit 0
      fi
      return 0
    fi

    # Determine how long we have been spinning for:
    local elapsed=$(bc -l <<<"$(date +%s.%N) - $start_time")

    # Abort once the spin duration has been exceeded:
    if (($(bc -l <<<"$elapsed >= $SPIN_DURATION_SEC"))); then
      break
    fi

    # Normalized time (0..1):
    local t=$(bc -l <<<"$elapsed / $SPIN_DURATION_SEC")

    # Ease-out:
    local eased=$($SPIN_METHOD $t)

    # Map eased progress to delay range (fast → slow):
    local delay=$(bc -l <<<"0.02 + (0.25 - 0.02) * $eased")

    # Wait the calculated delay before selecting another name:
    sub_second_sleep $delay
  done

  # Give a little more time to view the selected name:
  sub_second_sleep 0.5
}

function line2_selecting_last_name_animation() {
  # Select the last remaining name:
  selected_name="$(select_random_name)"

  # Loop through the name extruding one character at a time:
  for ((shift_x = 0; shift_x <= ${#selected_name}; shift_x++)); do

    # Update the display with the selected name:
    current_screen="selecting"
    update_line2

    # Check for any key press (non-blocking):
    if check_for_input; then
      if [[ "$KEY" == "q" ]]; then
        exit 0
      fi
      return 0
    fi

    # Wait before extruding the next character:
    sub_second_sleep 0.2
  done

  # Give a little more time to view the selected name:
  sub_second_sleep 0.5
}

function line2_selected_name_animation() {
  # Loop continuously until any key is pressed:
  while :; do
    # Shift the animation along one character:
    shift_x=$((${shift_x:-0} + 1))

    # Update the display with the selected name:
    current_screen="selected"
    update_line2

    # Check for any key press (non-blocking):
    if check_for_input; then
      if [[ "$KEY" == "q" ]]; then
        exit 0
      fi
      if [[ "$KEY" != "s" ]]; then
        remove_name "$selected_name"
      fi
      return 0
    fi

    # Wait before shifting the animation along one character:
    sub_second_sleep 0.1
  done
}

function on_exit() {
  rm -f "$image_temp_file"
  stty echo
  tput cnorm
  echo -e "$(clear_screen_sequence)"
}

function on_resize() {
  if ${update_in_progress:-false}; then
    update_in_progress="resize-occurred-during-update"
  else
    calculate_dimensions
    update_display force-clear-screen
  fi
}

function main() {

  local contestants_file="${1:-}"

  if [ -z "${contestants_file}" ]; then
    error "A contestants file must be specified." >&2
  fi

  if [ ! -r "$contestants_file" ]; then
    error "Cannot read contestants file: \"${CONTESTANTS_FILE}\"." >&2
  fi

  # Load the name-image mapping:
  declare -A name_image_map
  load_name_image_map "$contestants_file"

  # Extract all names into an array and sort alphabetically:
  all_names=($(printf "%s\n" "${!name_image_map[@]}" | grep -v '^!' | sort))
  debug "all_names=${all_names[*]}"

  # Keep track of the name that have not been selected:
  remaining_names=("${all_names[@]}")
  debug "remaining_names=${remaining_names[*]}"

  # Create a temp file to hold sixel image data
  image_temp_file="$(mktemp)"
  debug "image_temp_file=$image_temp_file"

  # Cleanup on exit:
  trap on_exit INT TERM EXIT

  # Run dimensions calculations before starting:
  calculate_dimensions

  # Pre-select random messages:
  selected_start_message="${START_MESSAGES[RANDOM % ${#START_MESSAGES[@]}]}"
  selected_last_message="${SELECTING_LAST_MESSAGES[RANDOM % ${#SELECTING_LAST_MESSAGES[@]}]}"
  selected_end_message="${END_MESSAGES[RANDOM % ${#END_MESSAGES[@]}]}"

  # Start display:
  current_screen="start"
  update_display

  # update display on terminal resize:
  trap on_resize WINCH

  # Hold your horses:
  wait_for_input
  if [[ "$KEY" == "q" ]]; then
    exit 0
  fi

  while [ "${#remaining_names[@]}" -gt 0 ]; do
    # Selecting display:
    current_screen="selecting"
    update_display
    # Selection animation:
    if [ "${#remaining_names[@]}" -gt 1 ]; then
      line2_selecting_name_animation
    else
      line2_selecting_last_name_animation
    fi
    # Selected display:
    current_screen="selected"
    update_display
    line2_selected_name_animation
  done

  # End display:
  current_screen="end"
  update_display

  # Hold your horses:
  wait_for_input
  if [[ "$KEY" == "q" ]]; then
    exit 0
  fi
}

if ! command -v perl >/dev/null; then
  error "'perl' not found, install perl." >&2
fi

if ! command -v convert >/dev/null; then
  error "'convert' not found, install imagemagick." >&2
fi

main $@
