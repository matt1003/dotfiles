#!/usr/bin/env python

# pylint: disable=missing-docstring
# pylint: disable=wrong-import-order

from __future__ import print_function
from rbtools.api.client import RBClient
from rbtools.api.errors import APIError
from rbtools.api.errors import ServerInterfaceError

import datetime
import optparse
import os
import re
import sys

def print_error(msg):
    print ("\033[91mERROR:\033[0m %s\n" % msg)

def print_warning(msg):
    print ("\033[93mWARNING:\033[0m %s\n" % msg)

def parse_config(path):
    config = {'user' : os.environ['USER']}
    if os.path.isfile(path):
        for line in open(path):
            # parse server url
            match = re.match(r'REVIEWBOARD_URL\s*=\s*"(.*)"', line)
            if match:
                config['url'] = match.group(1)
            # parse username
            match = re.match(r'USERNAME\s*=\s*"(.*)"', line)
            if match:
                config['user'] = match.group(1)
            # parse password
            match = re.match(r'PASSWORD\s*=\s*"(.*)"', line)
            if match:
                config['pwrd'] = match.group(1)
    return config

def parse_time_string(timestring):
    return datetime.datetime.strptime(timestring, "%Y-%m-%dT%H:%M:%SZ")

def get_latest_diff_for_review(review):
    diffs = review.get_diffs()
    ndiffs = diffs.total_results
    for diff in diffs:
        if diff.revision == ndiffs:
            return diff
    return None

def update_progress(current, total):
    length = 40 # progress bar length
    block = int(round(length*(float(current)/float(total))))
    text = "\rProgress: [{0}] {1}/{2}".format("#"*block + "-"*(length-block), current, total)
    sys.stdout.write(text)
    sys.stdout.flush()

def clear_progress():
    sys.stdout.write('\x1b[2K\r')
    sys.stdout.flush()

def parse_comment(comment, diff_time, ship_it):
    try:
        reviewer = comment.get_user().username
    except APIError:
        # skipping invalid username
        return
    if comment.public is False:
        # skipping non-public comment
        return
    if reviewer not in ship_it:
        # skipping ship it from user
        return
    if parse_time_string(comment.timestamp) <= diff_time:
        # skipping ship it from old diff
        return
    if comment.ship_it:
        ship_it[reviewer] = 'shipit'
    else:
        ship_it[reviewer] = 'comment'

def parse_review(review):
    # grab the listed reviewers
    ship_it = {}
    for person in review.target_people:
        ship_it[person.title] = 'none'

    # get the latest diff for the review
    diff = get_latest_diff_for_review(review)
    if diff:
        diff_time = parse_time_string(diff.timestamp)
    else:
        diff_time = parse_time_string("2000-01-01T00:00:00Z")

    # check each review comment for a "ship it"
    for comment in review.get_reviews():
        parse_comment(comment, diff_time, ship_it)

    summary = review.summary.strip()
    submitter = review.get_submitter().username
    return [review.id, summary, ship_it, submitter]

def print_review(review_attributes, url):
    review_id, summary, ship_it, submitter = review_attributes
    review_url = "%s/r/%s" % (url.strip('/'), review_id)
    print ("%s - %s - %s - ship it:" % (review_url, submitter, summary), end='')
    for reviewer in sorted(ship_it.iterkeys()):
        if ship_it[reviewer] == 'comment':
            color = " \033[91m"
        elif ship_it[reviewer] == 'shipit':
            color = " \033[92m"
        else:
            color = " \033[93m"
        print (" %s%s\033[0m" % (color, reviewer), end='')
    print ('\r')

def display_current_reviews(url, username, password, maximum, cmd):
    count = 0
    total = 0

    # get all open reviews for the user
    args = {cmd : username, 'status' : 'pending', 'max_results' : maximum}

    # connect to reviewboard
    try:
        client = RBClient(url, username=username, password=password)
        root = client.get_root()
    except ServerInterfaceError:
        print_error("Unable to connect to \"%s\", please ensure url is correct." % url)
        sys.exit(2)

    # download the reviews
    try:
        review_list = root.get_review_requests(**args)
    except APIError:
        print_error("Unable to locate \"%s\", please ensure username is correct." % username)
        sys.exit(2)

    # check how many we have
    total = review_list.total_results
    if total == 0:
        print ("(none)\n")
        return
    if total > maximum:
        print_warning("Found %d open reviews, but will only process max %d."
                      % (total, maximum) + " Use --max to change this.")
        total = maximum

    # process each review
    processed_reviews = {}
    for review in review_list:
        count += 1
        update_progress(count, total)
        processed_reviews[review.id] = parse_review(review)

    clear_progress()

    # print out the results
    for review_id in sorted(processed_reviews.iterkeys(), reverse=True):
        print_review(processed_reviews[review_id], url)

    # print out the total count
    if total != review_list.total_results:
        warn = " (however only showing the first %d)" % total
    else:
        warn = ''
    print ("total number of open reviews is %d%s\n" % (review_list.total_results, warn))

def main():

    config = parse_config("/home/mbright/.reviewboardrc")

    parser = optparse.OptionParser()

    parser.add_option('-s', '--server', dest='url', action="store", type="string",
                      default=config.get('url'), help='reviewboard server url')
    parser.add_option('-u', '--username', dest='user', action="store", type="string",
                      default=config.get('user'), help='reviewboard username')
    parser.add_option('-p', '--password', dest='pwrd', action="store", type="string",
                      default=config.get('pwrd'), help='reviewboard password')
    parser.add_option('-m', '--max', dest='max', action="store", type="int",
                      default=15, help='the maximum number of reviews to display')
    options = parser.parse_args()[0]

    if not options.url:
        print_error("You must specify the reviewboard server url (-s|--server).")
        sys.exit(1)
    if not options.user:
        print_error("You must specify the reviewboard username (-u|--username).")
        sys.exit(1)

    print ("*** My Review Requests ***\n")
    display_current_reviews(options.url, options.user, options.pwrd, options.max, 'from_user')

    print ("*** Other Review Requests ***\n")
    display_current_reviews(options.url, options.user, options.pwrd, options.max, 'to_users')

if __name__ == '__main__':
    main()

